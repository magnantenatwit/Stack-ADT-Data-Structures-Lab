/* @formatter:off * * Dave Rosenberg * Comp 2000 - Data Structures * Lab: Stack Application * Fall, 2020 * * Usage restrictions: * * You may use this code for exploration, experimentation, and furthering your * learning for this course. You may not use this code for any other * assignments, in my course or elsewhere, without explicit permission, in * advance, from myself (and the instructor of any other course). * * Further, you may not post nor otherwise share this code with anyone other than * current students in my sections of this course. Violation of these usage * restrictions will be considered a violation of the Wentworth Institute of * Technology Academic Honesty Policy. * * Do not remove this notice. * * @formatter:on */package edu.wit.dcsn.comp2000.stack.app ;import edu.wit.dcsn.comp2000.stack.common.StackInterface ;import java.util.EmptyStackException ;import java.util.Vector ;/** * A class of stacks whose entries are stored in a vector. *  * @author Frank M. Carrano and Timothy M. Henry * @version 5.0 *  * @author Dave Rosenberg * @version 5.0.1 2020-10-07 restructured according to class coding standard */@SuppressWarnings( "javadoc" )public final class VectorStack<T> implements StackInterface<T>    {    private Vector<T> stack ;   // Last element is the top entry in stack        private boolean integrityOK ;        private static final int DEFAULT_CAPACITY = 50 ;    private static final int MAX_CAPACITY = 10_000 ;    public VectorStack()        {        this( DEFAULT_CAPACITY ) ;        } // end default constructor    public VectorStack( final int initialCapacity )        {        this.integrityOK = false ;                checkCapacity( initialCapacity ) ;        this.stack = new Vector<>( initialCapacity ) ; // Size doubles as needed                this.integrityOK = true ;        } // end constructor    // 6.17    @Override    public void push( final T newEntry )        {        checkIntegrity() ;                this.stack.add( newEntry ) ;                } // end push    // 6.18    @Override    public T peek()        {        checkIntegrity() ;                if ( isEmpty() )            {            throw new EmptyStackException() ;            }                return this.stack.lastElement() ;                } // end peek    // 6.19    @Override    public T pop()        {        checkIntegrity() ;                if ( isEmpty() )            {            throw new EmptyStackException() ;            }                return this.stack.remove( this.stack.size() - 1 ) ;                } // end pop    // 6.20    @Override    public boolean isEmpty()        {        checkIntegrity() ;                return this.stack.isEmpty() ;                } // end isEmpty    // 6.20    @Override    public void clear()        {        checkIntegrity() ;                this.stack.clear() ;                } // end clear    // Throws an exception if this object is not initialized.    private void checkIntegrity()        {        if ( !this.integrityOK )            {            throw new SecurityException( "VectorStack object is corrupt." ) ;            }                } // end checkIntegrity    // Throws an exception if the client requests a capacity that is too large.    private void checkCapacity( final int capacity )        {        if ( capacity > MAX_CAPACITY )            {            throw new IllegalStateException( "Attempt to create a stack " +                                             "whose capacity exceeds " +                                             "allowed maximum." ) ;            }                } // end checkCapacity    /*     * testing/debugging methods     */        // This method is not typically implemented - I included it for debugging purposes    /*     * (non-Javadoc)     * @see java.lang.toString()     */    @Override    public String toString()        {        return "stack=" + this.stack.toString() +               ", integrityOK=" + this.integrityOK ;                }   // end toString()    /**     * (optional) driver for testing/debugging     *      * @param args     *     -unused-     */    public static void main( final String[] args )        {        // OPTIONAL for testing/debugging        StackInterface<String> testStack = new VectorStack<>() ;                System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "bottom" );        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "middle" );        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "top" );        System.out.printf( "%s%n", testStack.toString() ) ;                testStack.push( "more" );        System.out.printf( "%s%n", testStack.toString() ) ;                }   // end main()        } // end VectorStack