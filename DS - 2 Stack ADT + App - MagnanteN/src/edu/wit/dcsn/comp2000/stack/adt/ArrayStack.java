/* @formatter:off * * Dave Rosenberg * Comp 2000 - Data Structures * Lab: Stack ADT * Fall, 2020 *  * Usage restrictions: *  * You may use this code for exploration, experimentation, and furthering your * learning for this course. You may not use this code for any other * assignments, in my course or elsewhere, without explicit permission, in * advance, from myself (and the instructor of any other course). *  * Further, you may not post nor otherwise share this code with anyone other than * current students in my sections of this course. Violation of these usage * restrictions will be considered a violation of the Wentworth Institute of * Technology Academic Honesty Policy. * * Do not remove this notice. * * @formatter:on */package edu.wit.dcsn.comp2000.stack.adt ;import edu.wit.dcsn.comp2000.stack.common.ArrayStackCapacity ;import edu.wit.dcsn.comp2000.stack.common.StackInterface ;import java.util.Arrays ;import java.util.EmptyStackException ;/** * A class of stacks whose entries are stored in an array. * * @author Frank M. Carrano * @author Timothy M. Henry * @version 5.0 * @author Dave Rosenberg * @version 4.1.0 2019-02-08 add toArray(), toString() and main() * @version 5.1.0 2019-06-09 update to match 5th edition of textbook * @version 5.2.0 2019-10-07 *     <ul> *     <li>switch interface to work with new testing framework *     <li>remove toString() *     </ul> * @version 5.3.0 2020-10-07 *     <ul> *     <li>restore toString() *     <li>switch back to StackInterface from TestableStackInterface *     <li>streamline code *     </ul> * @author Nicholas Magnante // DONE * @version 5.4.0 2020-10-08 per assignment: reverse implementation to store bottom *     of the stack in {@code stack[stack.length-1]} instead of {@code stack[0]} * @param <T> *     The type of all objects to store in the stack */public final class ArrayStack<T> implements StackInterface<T>    {    private T[] stack ;                     // Array of stack entries    private int topIndex ;                  // Index of top entry    private boolean integrityOK ;    /** initial capacity if not specified */    static final int DEFAULT_CAPACITY = ArrayStackCapacity.DEFAULT.capacityValue ;    /** largest capacity supported by this implementation */    static final int MAX_CAPACITY = ArrayStackCapacity.MAXIMUM.capacityValue ;    /*     * constructors     */    /**     * Create an ArrayStack with a default/initial capacity of DEFAULT_CAPACITY     */    public ArrayStack()        {        this( DEFAULT_CAPACITY ) ;        }   // end no-arg constructor    /**     * Create an ArrayStack with an initial capacity specified by the application     *      * @param initialCapacity     *     the initial capacity (limited by MAX_CAPACITY)     */    public ArrayStack( final int initialCapacity )        {        // DONE make appropriate change(s) to this        this.integrityOK = false ;        checkCapacity( initialCapacity ) ;        // The cast is safe because the new array contains null entries        @SuppressWarnings( "unchecked" )        final T[] tempStack = (T[]) new Object[ initialCapacity ] ;        this.stack = tempStack ;        this.topIndex = initialCapacity ;        this.integrityOK = true ;        }   // end 1-arg constructor    /*     * public API methods     */    /*     * (non-Javadoc)     * @see edu.wit.dcsn.comp2000.stack.common.StackInterface#clear()     */    @Override    public void clear()        {        checkIntegrity() ;        // remove all entries from the stack        while ( !isEmpty() )            {            pop() ;            }   // end while        }   // end clear()    /*     * (non-Javadoc)     * @see edu.wit.dcsn.comp2000.stack.common.StackInterface#isEmpty()     */    @Override    public boolean isEmpty()        {        // DONE make appropriate change(s) to this        return this.topIndex == this.stack.length ;        }   // end isEmpty()    /*     * (non-Javadoc)     * @see edu.wit.dcsn.comp2000.stack.common.StackInterface#peek()     */    @Override    public T peek()        {        checkIntegrity() ;        if ( isEmpty() )            {            throw new EmptyStackException() ;            }        return this.stack[ this.topIndex ] ;        }   // end peek()    /*     * (non-Javadoc)     * @see edu.wit.dcsn.comp2000.stack.common.StackInterface#pop()     */    @Override    public T pop()        {        // DONE make appropriate change(s) to this        final T top = peek() ;        this.stack[ this.topIndex ] = null ;        this.topIndex++ ;        return top ;        }   // end pop()    /*     * (non-Javadoc)     * @see edu.wit.dcsn.comp2000.stack.common.StackInterface#push(java.lang.Object)     */    @Override    public void push( final T newEntry )        {        // DONE make appropriate change(s) to this        checkIntegrity() ;        ensureCapacity() ;        this.stack[ this.topIndex - 1 ] = newEntry ;        this.topIndex-- ;        }   // end push()    /*     * private utility methods     */    /**     * Throw an exception if the client requests a capacity that is too large or     * otherwise invalid.     *      * @param capacity     *     the desired capacity - must be greater than or equal to 1 and less than or     *     equal to MAX_CAPACITY     */    private static void checkCapacity( final int capacity )        {        if ( capacity > MAX_CAPACITY )            {            throw new IllegalStateException( "Attempt to create a stack " +                                             "whose capacity exceeds " +                                             "allowed maximum." ) ;            }        else if ( capacity < 1 )            {            throw new IllegalStateException( "Attempt to create a stack whose capacity is zero or negative." ) ;            }        // DONE finish this:        // throw an IllegalStateException with the message        // "Attempt to create a stack whose capacity is zero or negative."        // when necessary        }   // end checkCapacity()    /**     * Throw an exception if this object is not initialized.     */    private void checkIntegrity()        {        if ( !this.integrityOK )            {            throw new SecurityException( "ArrayStack object is not " +                                         "initialized properly." ) ;            }        }   // end checkIntegrity()    /**     * Doubles the size of the array {@code stack} if it is full     * <p>     * Precondition: checkIntegrity() has been called.     */    private void ensureCapacity()        {        if ( isArrayFull() )    // if array is full, double its size            {            final int newLength = 2 * this.stack.length ;            checkCapacity( newLength ) ;            // DONE copyOf)() won't work so replace it with:            // (1) instantiate the new array and            // (2) copy the contents of stack to the new array            @SuppressWarnings( "unchecked" )            final T[] copyStack = (T[]) new Object[ newLength ] ;            int counter = 1 ;            for ( int i = this.stack.length - 1 ; i > -1 ; i-- )                {                copyStack[ copyStack.length - counter ] = this.stack[ i ] ;                counter++ ;                }            this.topIndex = this.stack.length ;            this.stack = copyStack ;            } // end if        }   // end ensureCapacity()    private boolean isArrayFull()        {        // DONE make appropriate change(s) to this        return this.topIndex == 0 ;        }   // end isArrayFull()    /*     * testing/debugging methods     */    // This method is not typically implemented - I included it for debugging    // purposes    /*     * (non-Javadoc)     * @see java.lang.toString()     */    @Override    public String toString()        {        return "stack=" + Arrays.toString( this.stack ) + ", topIndex=" +               this.topIndex + ", integrityOK=" + this.integrityOK ;        }   // end toString()    /**     * (optional) driver for testing/debugging     *      * @param args     *     -unused-     */    public static void main( final String[] args )        {        // OPTIONAL for testing/debugging        StackInterface<String> testStack = new ArrayStack<>() ;        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "bottom" ) ;        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "middle" ) ;        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "top" ) ;        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "more" ) ;        System.out.printf( "%s%n", testStack.toString() ) ;        }   // end main()    } // end class ArrayStack